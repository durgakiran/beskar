version: '3.9'

services:
  graphql-engine:
    image: hasura/graphql-engine:v2.36.0
    ports:
      - "8080:8080"
    restart: always
    env_file:
      - .env.local
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: ${HASURA_GRAPHQL_METADATA_DATABASE_URL}
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: ${PG_DATABASE_URL}
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: ${HASURA_GRAPHQL_ENABLE_CONSOLE} # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: ${HASURA_GRAPHQL_DEV_MODE}
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: ${HASURA_GRAPHQL_ENABLED_LOG_TYPES}
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      # HASURA_GRAPHQL_JWT_SECRET: '{ "type": "HS256", "key": "3aa52dfd53ea35e6fcc9cc38c3167aff" }'
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_METADATA_DEFAULTS: ${HASURA_GRAPHQL_METADATA_DEFAULTS}
    depends_on:
      shield:
        condition: service_started
    networks:
      - custom_local_network
  shield:
    image: quay.io/keycloak/keycloak:24.0.2
    container_name: keycloak_auth
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: ${KC_DB}
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${DB_ADMIN_USERNAME}
      KC_DB_PASSWORD: ${DB_ADMIN_PASSWORD}
      KC_LOG_LEVEL: DEBUG
    ports:
      - "8083:8080"
    command:
      - start-dev
    networks:
      - custom_local_network
  proxy:
    container_name: proxy
    image: nginx:1.24
    depends_on:
      shield:
        condition: service_started
    networks:
      - custom_local_network
    ports:
      - "8085:8085" # hits keycloak server      
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "service nginx status || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
  guard:
    image: ghcr.io/permify/permify-beta:v1.0.2-2c9db609
    container_name: permify_guard
    environment:
      PERMIFY_DATABASE_ENGINE: postgres
      PERMIFY_DATABASE_URI: "postgres://${DB_ADMIN_USERNAME}:${DB_ADMIN_PASSWORD}@postgres:5432/auth"
      PERMIFY_DATABASE_AUTO_MIGRATE: true
      PERMIFY_DATABASE_MAX_OPEN_CONNECTIONS: 20
      PERMIFY_AUTHN_ENABLED: true
      PERMIFY_AUTHN_METHOD: preshared
      PERMIFY_AUTHN_PRESHARED_KEYS: "secret"
      PERMIFY_AUTHN_OIDC_ISSUER: "http://shield:8080/realms/devbeskarrealm"
      PERMIFY_AUTHN_OIDC_AUDIENCE: account
      PERMIFY_AUTHN_OIDC_REFRESH_INTERVAL: 10m
      PERMIFY_AUTHN_OIDC_BACKOFF_MAX_RETRIES: 5
      PERMIFY_AUTHN_OIDC_BACKOFF_FREQUENCY: 12s
      PERMIFY_AUTHN_OIDC_VALID_METHODS: "RS256"
      PERMIFY_LOGGER_LEVEL: info
      PERMIFY_SERVER_RATE_LIMIT: 100
      PERMIFY_SERVER_HTTP_ENABLED: true
      PERMIFY_SERVER_HTTP_PORT: 3476
      PERMIFY_SERVER_HTTP_TLS_ENABLED: false
      PERMIFY_SERVER_GRPS_PORT: 3478
      PERMIFY_SERVER_GRPC_TLS_ENABLED: false
      PERMIFY_LOG_ENABLED: false
    depends_on:
      shield:
        condition: service_started
    ports:
      - 3476:3476
      - 3478:3478
    networks:
      - custom_local_network


networks:
  custom_local_network:
    external: true
