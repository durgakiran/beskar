version: '3.9'

services:
  proxy:
    container_name: proxy
    image: nginx:1.24
    # depends_on:
    #   shield:
    #     condition: service_started
    networks:
      custom_local_network:
        aliases:
          - app.tededox.com
          - app.durgakiran.com
          - id.durgakiran.com
    ports:
      - "8085:8085" # hits ui and api server  
      - "80:80" # hits zitadel server   
      - "443:443" # hits zitadel server
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/certs:/etc/nginx/ssl
    healthcheck:
      test: ["CMD-SHELL", "service nginx status || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
  guard:
    image: ghcr.io/permify/permify #-beta:v1.0.2-2c9db609
    container_name: permify_guard
    environment:
      PERMIFY_DATABASE_ENGINE: postgres
      PERMIFY_DATABASE_URI: "postgres://${DB_ADMIN_USERNAME}:${DB_ADMIN_PASSWORD}@postgres:5432/auth"
      PERMIFY_DATABASE_AUTO_MIGRATE: true
      PERMIFY_DATABASE_MAX_OPEN_CONNECTIONS: 20
      PERMIFY_AUTHN_ENABLED: true
      PERMIFY_AUTHN_METHOD: preshared
      PERMIFY_AUTHN_PRESHARED_KEYS: "${PERMIFY_SECRET}"
      # PERMIFY_AUTHN_OIDC_ISSUER: "http://shield:8080/realms/devbeskarrealm"
      # PERMIFY_AUTHN_OIDC_AUDIENCE: account
      # PERMIFY_AUTHN_OIDC_REFRESH_INTERVAL: 10m
      # PERMIFY_AUTHN_OIDC_BACKOFF_MAX_RETRIES: 5
      # PERMIFY_AUTHN_OIDC_BACKOFF_FREQUENCY: 12s
      # PERMIFY_AUTHN_OIDC_VALID_METHODS: "RS256"
      PERMIFY_LOGGER_LEVEL: info
      PERMIFY_SERVER_RATE_LIMIT: 100
      PERMIFY_SERVER_HTTP_ENABLED: true
      PERMIFY_SERVER_HTTP_PORT: 3476
      PERMIFY_SERVER_HTTP_TLS_ENABLED: false
      PERMIFY_SERVER_GRPS_PORT: 3478
      PERMIFY_SERVER_GRPC_TLS_ENABLED: false
      PERMIFY_LOG_ENABLED: false
    # depends_on:
    #   shield:
    #     condition: service_started
    ports:
      - 3476:3476
      - 3478:3478
    networks:
      - custom_local_network
  zitadel:
    restart: always
    image: ghcr.io/zitadel/zitadel:latest
    command: 'start-from-init --masterkey "bJEJYXs8PAyWgY0mdF3SWcEhn99Kkqp5" --tlsMode external'
    environment:
      ZITADEL_EXTERNALDOMAIN: id.durgakiran.com
      # In case something doesn't work as expected,
      # it can be handy to be able to read the access logs.
      ZITADEL_LOGSTORE_ACCESS_STDOUT_ENABLED: true
      ZITADEL_DATABASE_POSTGRES_HOST: postgres
      ZITADEL_DATABASE_POSTGRES_PORT: 5432
      ZITADEL_DATABASE_POSTGRES_DATABASE: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_USERNAME: ${DB_ADMIN_USERNAME}
      ZITADEL_DATABASE_POSTGRES_USER_PASSWORD: ${DB_ADMIN_PASSWORD}
      ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE: disable
      ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME: admin
      ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD: password
      ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE: disable
      ZITADEL_EXTERNALSECURE: true
    ports:
      - 8084:8080
    volumes:
      - ./nginx/certs/_wildcard.durgakiran.com.pem:/etc/ssl/certs/_wildcard.durgakiran.com.pem:ro
    networks:
      - custom_local_network
  ui:
    container_name: tededox-ui
    build:
      context: ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_EXTRA_CA_CERTS=/etc/ssl/certs/_wildcard.durgakiran.com.pem
    volumes:
      - /Users/kiran/projects/beskar/ui/:/app
      - /Users/kiran/projects/beskar/packages/:/opt/packages
      - ./nginx/certs/_wildcard.durgakiran.com.pem:/etc/ssl/certs/_wildcard.durgakiran.com.pem:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -XGET --output /dev/null --silent --head --fail http://localhost:3000/ || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 6
    networks:
      - custom_local_network
  collabserver:
    container_name: tededox-collabserver
    build:
      context: collabserver
      dockerfile: Dockerfile
    ports:
      - "1234:1234"
    volumes:
      - /Users/kiran/projects/beskar/collabserver/:/app
      - ./nginx/certs/_wildcard.durgakiran.com.pem:/etc/ssl/certs/_wildcard.durgakiran.com.pem:ro
    environment:
      - REDIS_HOST=tededox-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_password}
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -XGET --output /dev/null --silent --head --fail http://localhost:1234/ || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 6
    networks:
      - custom_local_network
  redis:
    container_name: tededox-redis
    image: redis:latest
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password} --appendonly yes --loglevel verbose
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_password}
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data  # For persistence
      - ./redis-logs:/var/log/redis  # For logs
    networks:
      - custom_local_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secure_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  server:
    container_name: tededox-server
    build:
      context: server
      dockerfile: Dockerfile
    environment:
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DB: ${PG_DB}
      PG_USER: ${PG_DB_APP_USER}
      PG_PASSWORD: ${PG_DB_APP_USER_PWD}
      PERMIFY_ENDPOINT: ${PERMIFY_HOST}
      PERMIFY_SECRET: ${PERMIFY_SECRET}
      ISSUER_URL: ${ZITADEL_ISSUER} # http://app.tededox.com
      CLIENT_ID: ${ZITADEL_CLIENT_ID}
      SERVER_PAT: ${ZITADEL_USER_PAT}
      KEY: ${ZITADEL_CLIENT_SECRET}
      SERVER_URL: ${BESKAR_SERVER}
    ports:
      - "9095:9095"
      - "40000:40000"
    volumes:
      - /Users/kiran/projects/beskar/server/:/app
      - ./nginx/certs/_wildcard.durgakiran.com.pem:/etc/ssl/certs/_wildcard.durgakiran.com.pem:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -XGET --output /dev/null --silent --head --fail http://localhost:9095/ || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 6
    networks:
      - custom_local_network



networks:
  custom_local_network:
    external: true
