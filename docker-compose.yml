version: '3.9'

services:
  postgres:
    image: postgres:14-alpine
    container_name: core-database
    ports:
      - "5433:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=admin
    networks:
      - local
  graphql-engine:
    image: hasura/graphql-engine:v2.36.0
    ports:
      - "8080:8080"
    restart: always
    env_file:
      - .env.local
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://beskar_admin:beskar_admin_pwd@postgres:5432/beskar
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://beskar_admin:beskar_admin_pwd@postgres:5432/beskar
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      # HASURA_GRAPHQL_JWT_SECRET: '{ "type": "HS256", "key": "3aa52dfd53ea35e6fcc9cc38c3167aff" }'
      HASURA_GRAPHQL_JWT_SECRET: '{ "jwk_url": "http://shield:8080/realms/beskar/protocol/openid-connect/certs" }'
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: '@HASURA_ADMIN_SECRET@'
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
    depends_on:
      data-connector-agent:
        condition: service_healthy
      shield:
        condition: service_started
      postgres:
        condition: service_started
    networks:
      - local
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.36.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - local
  mongodb:
    image: mongo:latest
    container_name: document-database
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - ./dbdatamongo:/data/db
    networks:
      - local
  shield:
    image: quay.io/keycloak/keycloak:23.0.6
    container_name: keycloak_auth
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/auth
      KC_DB_USERNAME: beskar_admin
      KC_DB_PASSWORD: beskar_admin_pwd
    ports:
      - "8083:8080"
    command:
      - start-dev
    networks:
      - local
    depends_on:
      - postgres

networks:
  local:
    name: local-network
